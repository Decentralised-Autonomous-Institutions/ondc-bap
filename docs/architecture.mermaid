%% ============================================================================
%% 1. ONDC BAP Server - High Level Architecture
%% ============================================================================

graph TB
    subgraph "ONDC BAP Server Architecture"
        direction TB
        
        %% External Systems
        subgraph "External Systems"
            ONDC_REGISTRY[üåê ONDC Registry<br/>staging/preprod/prod]
            SSL_PROVIDER[üîí SSL Certificate<br/>Provider]
            DNS_PROVIDER[üåç DNS Provider<br/>Domain Management]
        end
        
        %% BAP Server Layers
        subgraph "ONDC BAP Server"
            direction TB
            
            %% Presentation Layer
            subgraph "üéØ Presentation Layer (Axum)"
                HTTP_SERVER[HTTP Server<br/>Axum Router]
                MIDDLEWARE[Middleware Stack<br/>CORS, Logging, Auth]
                
                subgraph "Endpoints"
                    SITE_VERIFY["/ondc-site-verification.html"]
                    ON_SUBSCRIBE["/on_subscribe"]
                    HEALTH["/health"]
                    ADMIN_API["/admin/*"]
                    NL_QUERY_API["/query<br/>Natural Language Queries"]
                end
            end
            
            %% Services Layer
            subgraph "‚öôÔ∏è Services Layer"
                ONBOARD_SVC[Onboarding Service]
                KEY_MGR_SVC[Key Management Service]
                REGISTRY_SVC[Registry Client Service]
                CHALLENGE_SVC[Challenge Handler Service]
                AGENT_INTEGRATION_SVC[Agent Integration Service<br/>NL Query Processing]
            end
            
            %% Domain Layer
            subgraph "üèõÔ∏è Domain Layer"
                SUBSCRIBER[Subscriber Entity]
                CHALLENGE[Challenge Entity]
                REGISTRATION[Registration Entity]
                KEY_PAIR[KeyPair Value Object]
                DOMAIN_RULES[Domain Rules & Validation]
            end
            
            %% Infrastructure Layer
            subgraph "üîß Infrastructure Layer"
                CONFIG_MGR[Configuration Manager]
                HTTP_CLIENT[HTTP Client<br/>Registry APIs]
                FILE_SYS[File System<br/>Key Storage]
                LOGGER[Logging & Tracing]
            end
        end
        
        %% ONDC Agent Components
        subgraph "ü§ñ ONDC Agent (ondc-agent)"
            AGENT_ORCHESTRATOR[ONDC Agent<br/>Main orchestrator]
            INTENT_CHAIN[Intent Extraction Chain<br/>NL ‚Üí Intent]
            BECKN_CHAIN[Beckn Generation Chain<br/>Intent ‚Üí Beckn JSON]
            LLM_PROVIDER[LLM Provider<br/>Ollama/OpenAI/Anthropic]
            AGENT_VALIDATOR[Agent Validator<br/>Input/Output validation]
        end
        
        %% Crypto Components
        subgraph "üîê Crypto Foundation"
            ED25519_SIGNER[Ed25519 Signer<br/>ondc-crypto-algorithms]
            X25519_EXCHANGE[X25519 KeyExchange<br/>ondc-crypto-algorithms]
            BASE64_UTILS[Base64 Utils<br/>ondc-crypto-formats]
            BLAKE2_HASHER[Blake2 Hasher<br/>ondc-crypto-algorithms]
        end
        
        %% Connections - External
        ONDC_REGISTRY <--> HTTP_CLIENT
        SSL_PROVIDER --> HTTP_SERVER
        DNS_PROVIDER --> HTTP_SERVER
        
        %% Connections - Internal Layers
        HTTP_SERVER --> MIDDLEWARE
        MIDDLEWARE --> SITE_VERIFY
        MIDDLEWARE --> ON_SUBSCRIBE
        MIDDLEWARE --> HEALTH
        MIDDLEWARE --> ADMIN_API
        MIDDLEWARE --> NL_QUERY_API
        
        SITE_VERIFY --> ONBOARD_SVC
        ON_SUBSCRIBE --> CHALLENGE_SVC
        ADMIN_API --> ONBOARD_SVC
        ADMIN_API --> KEY_MGR_SVC
        NL_QUERY_API --> AGENT_INTEGRATION_SVC
        
        ONBOARD_SVC --> REGISTRY_SVC
        ONBOARD_SVC --> KEY_MGR_SVC
        CHALLENGE_SVC --> KEY_MGR_SVC
        REGISTRY_SVC --> HTTP_CLIENT
        AGENT_INTEGRATION_SVC --> AGENT_ORCHESTRATOR
        AGENT_INTEGRATION_SVC --> REGISTRY_SVC
        
        KEY_MGR_SVC --> SUBSCRIBER
        ONBOARD_SVC --> REGISTRATION
        CHALLENGE_SVC --> CHALLENGE
        
        SUBSCRIBER --> KEY_PAIR
        REGISTRATION --> DOMAIN_RULES
        CHALLENGE --> DOMAIN_RULES
        
        KEY_MGR_SVC --> ED25519_SIGNER
        KEY_MGR_SVC --> X25519_EXCHANGE
        REGISTRY_SVC --> BASE64_UTILS
        CHALLENGE_SVC --> X25519_EXCHANGE
        
        %% ONDC Agent internal connections
        AGENT_ORCHESTRATOR --> INTENT_CHAIN
        AGENT_ORCHESTRATOR --> BECKN_CHAIN
        INTENT_CHAIN --> LLM_PROVIDER
        BECKN_CHAIN --> LLM_PROVIDER
        AGENT_ORCHESTRATOR --> AGENT_VALIDATOR
        INTENT_CHAIN --> AGENT_VALIDATOR
        BECKN_CHAIN --> AGENT_VALIDATOR
        
        CONFIG_MGR --> FILE_SYS
        HTTP_CLIENT --> LOGGER
        KEY_MGR_SVC --> FILE_SYS
        
        %% Styling
        classDef externalSystem fill:#ffebcd,stroke:#d2691e,stroke-width:2px
        classDef presentationLayer fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
        classDef applicationLayer fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
        classDef domainLayer fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
        classDef infrastructureLayer fill:#fce4ec,stroke:#c2185b,stroke-width:2px 
        classDef cryptoLayer fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
        classDef agentLayer fill:#fff3e0,stroke:#ff6f00,stroke-width:2px
        
        class ONDC_REGISTRY,SSL_PROVIDER,DNS_PROVIDER externalSystem
        class HTTP_SERVER,MIDDLEWARE,SITE_VERIFY,ON_SUBSCRIBE,HEALTH,ADMIN_API,NL_QUERY_API presentationLayer
        class ONBOARD_SVC,KEY_MGR_SVC,REGISTRY_SVC,CHALLENGE_SVC,AGENT_INTEGRATION_SVC applicationLayer
        class SUBSCRIBER,CHALLENGE,REGISTRATION,KEY_PAIR,DOMAIN_RULES domainLayer
        class CONFIG_MGR,HTTP_CLIENT,FILE_SYS,LOGGER infrastructureLayer
        class ED25519_SIGNER,X25519_EXCHANGE,BASE64_UTILS,BLAKE2_HASHER cryptoLayer
        class AGENT_ORCHESTRATOR,INTENT_CHAIN,BECKN_CHAIN,LLM_PROVIDER,AGENT_VALIDATOR agentLayer
    end

---

%% ============================================================================
%% 2. ONDC Onboarding Flow Sequence
%% ============================================================================

sequenceDiagram
    participant Admin as üë§ Administrator
    participant BAP as üñ•Ô∏è BAP Server
    participant Registry as üåê ONDC Registry
    participant FS as üíæ File System
    
    Note over Admin,FS: ONDC Network Participant Onboarding Flow
    
    %% Prerequisites Check
    Admin->>BAP: POST /admin/register
    BAP->>FS: Load signing/encryption keys
    FS-->>BAP: Private keys
    BAP->>BAP: Validate domain & SSL
    BAP->>BAP: Generate request_id
    
    %% Site Verification Setup
    BAP->>BAP: Sign request_id with Ed25519
    BAP->>FS: Store signed verification
    Note over BAP: Site verification ready at /ondc-site-verification.html
    
    %% Registry Registration
    BAP->>Registry: POST /subscribe
    Note right of Registry: Payload includes:<br/>- subscriber_id<br/>- public keys<br/>- callback_url
    
    Registry->>Registry: Validate payload schema
    Registry->>Registry: Perform OCSP check
    Registry->>BAP: GET /ondc-site-verification.html
    BAP-->>Registry: Signed verification HTML
    Registry->>Registry: Verify domain signature
    
    %% Challenge-Response
    Registry->>BAP: POST /on_subscribe
    Note right of Registry: Contains encrypted challenge
    BAP->>BAP: Generate X25519 shared secret
    BAP->>BAP: Decrypt challenge with AES-256-ECB
    BAP-->>Registry: { "answer": "decrypted_challenge" }
    
    Registry->>Registry: Validate challenge response
    Registry-->>BAP: Registration success/failure
    BAP-->>Admin: Registration status
    
    %% Verification
    Admin->>BAP: GET /admin/status
    BAP->>Registry: POST /v2.0/lookup
    Registry-->>BAP: Participant record
    BAP-->>Admin: Registration confirmed

---

%% ============================================================================
%% 2.5. ONDC Agent Natural Language Query Flow
%% ============================================================================

sequenceDiagram
    participant User as üë§ User
    participant BAP as üñ•Ô∏è BAP Server
    participant Agent as ü§ñ ONDC Agent
    participant LLM as üß† LLM (Ollama)
    participant BPP as üè™ ONDC BPPs
    
    Note over User,BPP: Natural Language to ONDC Search Flow
    
    %% Natural Language Query
    User->>BAP: POST /query<br/>{"query": "I need fresh vegetables in Bangalore"}
    BAP->>BAP: Validate input query
    BAP->>Agent: extract_intent(query)
    
    %% Intent Extraction
    Agent->>Agent: Prepare prompt with few-shot examples
    Agent->>LLM: Generate intent from natural language
    Note right of LLM: Prompt: Extract e-commerce intent<br/>- Category: vegetables<br/>- Location: Bangalore<br/>- Urgency: normal
    LLM-->>Agent: Intent JSON response
    
    Agent->>Agent: Validate intent confidence (>70%)
    Agent->>Agent: Enrich intent (normalize location, category codes)
    Agent-->>BAP: Extracted Intent
    
    %% Beckn Request Generation  
    BAP->>Agent: generate_search_request(intent)
    Agent->>Agent: Map intent to Beckn protocol
    Agent->>Agent: Generate Beckn context (transaction_id, etc.)
    Agent->>Agent: Build Beckn message structure
    Agent->>Agent: Validate Beckn schema compliance
    Agent-->>BAP: Beckn Search Request
    
    %% ONDC Search Execution
    BAP->>BPP: Broadcast Beckn search to BPPs
    Note right of BPP: Standard ONDC search protocol<br/>across multiple providers
    BPP-->>BAP: Search responses from providers
    
    %% Response Formatting
    BAP->>BAP: Aggregate search results
    BAP->>BAP: Format user-friendly response
    BAP-->>User: Natural language search results
    
    Note over User,BPP: Complete NL ‚Üí Intent ‚Üí Beckn ‚Üí Search ‚Üí Results flow

---

%% ============================================================================
%% 3. BAP Server Request Processing Flow
%% ============================================================================

graph LR
    subgraph "Request Processing Architecture"
        direction LR
        
        %% Incoming Requests
        CLIENT[üì± Client Request]
        REGISTRY_REQ[üåê Registry Request]
        
        %% Axum Router
        subgraph "Axum Router & Middleware"
            ROUTER[Router]
            AUTH_MW[Auth Middleware]
            LOG_MW[Logging Middleware]
            CORS_MW[CORS Middleware]
            ERROR_MW[Error Middleware]
        end
        
        %% Handlers
        subgraph "Request Handlers"
            SITE_HANDLER[Site Verification Handler]
            SUBSCRIBE_HANDLER[On Subscribe Handler]
            ADMIN_HANDLER[Admin Handler]
            HEALTH_HANDLER[Health Handler]
        end
        
        %% Services
        subgraph "Application Services"
            ONBOARD_SERVICE[Onboarding Service]
            KEY_SERVICE[Key Management]
            REGISTRY_CLIENT[Registry Client]
            CRYPTO_SERVICE[Crypto Operations]
        end
        
        %% External
        ONDC_API[üåê ONDC Registry API]
        FILE_STORAGE[üíæ Key Storage]
        
        %% Flow
        CLIENT --> ROUTER
        REGISTRY_REQ --> ROUTER
        
        ROUTER --> AUTH_MW
        AUTH_MW --> LOG_MW
        LOG_MW --> CORS_MW
        CORS_MW --> ERROR_MW
        
        ERROR_MW --> SITE_HANDLER
        ERROR_MW --> SUBSCRIBE_HANDLER
        ERROR_MW --> ADMIN_HANDLER
        ERROR_MW --> HEALTH_HANDLER
        
        SITE_HANDLER --> ONBOARD_SERVICE
        SUBSCRIBE_HANDLER --> CRYPTO_SERVICE
        ADMIN_HANDLER --> ONBOARD_SERVICE
        HEALTH_HANDLER --> REGISTRY_CLIENT
        
        ONBOARD_SERVICE --> KEY_SERVICE
        ONBOARD_SERVICE --> REGISTRY_CLIENT
        CRYPTO_SERVICE --> KEY_SERVICE
        
        REGISTRY_CLIENT --> ONDC_API
        KEY_SERVICE --> FILE_STORAGE
        
        %% Styling
        classDef clientLayer fill:#e8f5e8,stroke:#2e7d32
        classDef middlewareLayer fill:#e3f2fd,stroke:#1565c0
        classDef handlerLayer fill:#fff3e0,stroke:#ef6c00
        classDef serviceLayer fill:#fce4ec,stroke:#c2185b
        classDef externalLayer fill:#f3e5f5,stroke:#7b1fa2
        
        class CLIENT,REGISTRY_REQ clientLayer
        class ROUTER,AUTH_MW,LOG_MW,CORS_MW,ERROR_MW middlewareLayer
        class SITE_HANDLER,SUBSCRIBE_HANDLER,ADMIN_HANDLER,HEALTH_HANDLER handlerLayer
        class ONBOARD_SERVICE,KEY_SERVICE,REGISTRY_CLIENT,CRYPTO_SERVICE serviceLayer
        class ONDC_API,FILE_STORAGE externalLayer
    end

---

%% ============================================================================
%% 3.5. ONDC Agent Processing Flow
%% ============================================================================

graph LR
    subgraph "ONDC Agent Processing Architecture"
        direction LR
        
        %% Input
        NL_INPUT[üë§ Natural Language Query<br/>"I need fresh vegetables in Bangalore"]
        
        %% Intent Extraction Chain
        subgraph "üîç Intent Extraction Chain"
            PROMPT_PREP[Prompt Preparation<br/>Few-shot examples + Query]
            LLM_CALL[LLM API Call<br/>Ollama/Gemma-3n]
            INTENT_PARSE[Intent Parsing<br/>JSON validation]
            CONFIDENCE_CHECK[Confidence Check<br/>>70% threshold]
            INTENT_ENRICH[Intent Enrichment<br/>Location/Category normalization]
        end
        
        %% Intent Structure
        INTENT_OUTPUT[üìã Structured Intent<br/>Category: Grocery/Vegetables<br/>Location: Bangalore, KA<br/>Urgency: Normal<br/>Confidence: 0.85]
        
        %% Beckn Generation Chain
        subgraph "üîÑ Beckn Generation Chain"
            CONTEXT_GEN[Context Generation<br/>transaction_id, message_id, etc.]
            MESSAGE_BUILD[Message Builder<br/>Intent ‚Üí Beckn fields]
            SCHEMA_VALID[Schema Validation<br/>Beckn protocol compliance]
            JSON_FORMAT[JSON Formatting<br/>Final Beckn request]
        end
        
        %% Output
        BECKN_OUTPUT[üìÑ Beckn Search Request<br/>ONDC protocol compliant JSON]
        
        %% Error Handling
        subgraph "‚ö†Ô∏è Error Handling"
            VALIDATION_ERROR[Validation Errors]
            CONFIDENCE_ERROR[Low Confidence]
            LLM_ERROR[LLM API Errors]
            SCHEMA_ERROR[Schema Errors]
        end
        
        %% External Dependencies
        OLLAMA_API[üß† Ollama API<br/>Local LLM Server]
        BECKN_SPECS[üìã Beckn Protocol Specs<br/>Context7 Integration]
        
        %% Flow connections
        NL_INPUT --> PROMPT_PREP
        PROMPT_PREP --> LLM_CALL
        LLM_CALL --> INTENT_PARSE
        INTENT_PARSE --> CONFIDENCE_CHECK
        CONFIDENCE_CHECK --> INTENT_ENRICH
        INTENT_ENRICH --> INTENT_OUTPUT
        
        INTENT_OUTPUT --> CONTEXT_GEN
        CONTEXT_GEN --> MESSAGE_BUILD
        MESSAGE_BUILD --> SCHEMA_VALID
        SCHEMA_VALID --> JSON_FORMAT
        JSON_FORMAT --> BECKN_OUTPUT
        
        %% External connections
        LLM_CALL --> OLLAMA_API
        MESSAGE_BUILD --> BECKN_SPECS
        
        %% Error flows
        INTENT_PARSE --> VALIDATION_ERROR
        CONFIDENCE_CHECK --> CONFIDENCE_ERROR
        LLM_CALL --> LLM_ERROR
        SCHEMA_VALID --> SCHEMA_ERROR
        
        %% Styling
        classDef inputLayer fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
        classDef intentLayer fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
        classDef becknLayer fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
        classDef outputLayer fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
        classDef errorLayer fill:#ffcdd2,stroke:#d32f2f,stroke-width:2px
        classDef externalLayer fill:#fff8e1,stroke:#f57c00,stroke-width:2px
        
        class NL_INPUT inputLayer
        class PROMPT_PREP,LLM_CALL,INTENT_PARSE,CONFIDENCE_CHECK,INTENT_ENRICH,INTENT_OUTPUT intentLayer
        class CONTEXT_GEN,MESSAGE_BUILD,SCHEMA_VALID,JSON_FORMAT becknLayer
        class BECKN_OUTPUT outputLayer
        class VALIDATION_ERROR,CONFIDENCE_ERROR,LLM_ERROR,SCHEMA_ERROR errorLayer
        class OLLAMA_API,BECKN_SPECS externalLayer
    end

---

%% ============================================================================
%% 4. Key Management and Crypto Operations
%% ============================================================================

graph TB
    subgraph "Key Management & Crypto Architecture"
        direction TB
        
        %% Configuration
        subgraph "üîß Configuration Layer"
            ENV_CONFIG[Environment Config<br/>TOML/JSON]
            KEY_CONFIG[Key Configuration<br/>Base64/DER formats]
            ONDC_CONFIG[ONDC Settings<br/>Registry URLs, timeouts]
        end
        
        %% Key Management
        subgraph "üîë Key Management Service"
            KEY_LOADER[Key Loader<br/>Secure loading]
            KEY_VALIDATOR[Key Validator<br/>Format & length checks]
            KEY_STORAGE[Key Storage<br/>Memory-safe handling]
            KEY_ROTATOR[Key Rotation<br/>Lifecycle management]
        end
        
        %% Crypto Operations
        subgraph "üîê Crypto Operations Service"
            SIGN_OPS[Signing Operations<br/>Ed25519 signing]
            VERIFY_OPS[Verification Operations<br/>Signature validation]
            EXCHANGE_OPS[Key Exchange<br/>X25519 ECDH]
            ENCRYPT_OPS[Encryption/Decryption<br/>AES-256-ECB]
        end
        
        %% Crypto Algorithms
        subgraph "‚öôÔ∏è Crypto Algorithms (ondc-crypto-algorithms)"
            ED25519_ALG[Ed25519Signer<br/>Ed25519Verifier]
            X25519_ALG[X25519KeyExchange<br/>Shared secret generation]
            BLAKE2_ALG[Blake2Hasher<br/>Digest generation]
        end
        
        %% Format Utilities
        subgraph "üìÑ Format Utils (ondc-crypto-formats)"
            BASE64_FMT[Base64 Encoding<br/>Multiple variants]
            KEY_FMT[Key Format Conversion<br/>Raw/Base64/DER]
            ENCODING_FMT[Encoding Utilities<br/>Safe conversions]
        end
        
        %% External Storage
        FILE_SYS[üíæ File System<br/>Secure key files]
        ENV_VARS[üåç Environment Variables<br/>Runtime configuration]
        
        %% Connections
        ENV_CONFIG --> KEY_LOADER
        KEY_CONFIG --> KEY_LOADER
        ONDC_CONFIG --> KEY_LOADER
        
        KEY_LOADER --> KEY_VALIDATOR
        KEY_VALIDATOR --> KEY_STORAGE
        KEY_STORAGE --> KEY_ROTATOR
        
        KEY_STORAGE --> SIGN_OPS
        KEY_STORAGE --> VERIFY_OPS
        KEY_STORAGE --> EXCHANGE_OPS
        KEY_STORAGE --> ENCRYPT_OPS
        
        SIGN_OPS --> ED25519_ALG
        VERIFY_OPS --> ED25519_ALG
        EXCHANGE_OPS --> X25519_ALG
        ENCRYPT_OPS --> X25519_ALG
        
        SIGN_OPS --> BASE64_FMT
        VERIFY_OPS --> BASE64_FMT
        EXCHANGE_OPS --> KEY_FMT
        ENCRYPT_OPS --> ENCODING_FMT
        
        KEY_LOADER --> FILE_SYS
        KEY_LOADER --> ENV_VARS
        
        %% Styling
        classDef configLayer fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
        classDef keyMgmtLayer fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
        classDef cryptoOpsLayer fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
        classDef algorithmsLayer fill:#fce4ec,stroke:#c2185b,stroke-width:2px
        classDef formatLayer fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
        classDef storageLayer fill:#fff8e1,stroke:#f57c00,stroke-width:2px
        
        class ENV_CONFIG,KEY_CONFIG,ONDC_CONFIG configLayer
        class KEY_LOADER,KEY_VALIDATOR,KEY_STORAGE,KEY_ROTATOR keyMgmtLayer
        class SIGN_OPS,VERIFY_OPS,EXCHANGE_OPS,ENCRYPT_OPS cryptoOpsLayer
        class ED25519_ALG,X25519_ALG,BLAKE2_ALG algorithmsLayer
        class BASE64_FMT,KEY_FMT,ENCODING_FMT formatLayer
        class FILE_SYS,ENV_VARS storageLayer
    end

---

%% ============================================================================
%% 5. Error Handling and Security Architecture
%% ============================================================================

graph TD
    subgraph "Error Handling & Security Architecture"
        direction TD
        
        %% Error Sources
        subgraph "üö® Error Sources"
            HTTP_ERRORS[HTTP Request Errors<br/>4xx, 5xx responses]
            CRYPTO_ERRORS[Cryptographic Errors<br/>Invalid keys, signatures]
            REGISTRY_ERRORS[Registry API Errors<br/>Network, protocol issues]
            CONFIG_ERRORS[Configuration Errors<br/>Missing keys, invalid URLs]
            VALIDATION_ERRORS[Validation Errors<br/>Invalid payloads, formats]
        end
        
        %% Error Processing
        subgraph "‚öôÔ∏è Error Processing Pipeline"
            ERROR_CLASSIFIER[Error Classification<br/>Categorize error types]
            ERROR_ENRICHER[Context Enrichment<br/>Add correlation IDs]
            ERROR_CONVERTER[Error Conversion<br/>Internal ‚Üí HTTP responses]
            ERROR_LOGGER[Error Logging<br/>Structured logging]
            ERROR_METRICS[Error Metrics<br/>Monitoring & alerting]
        end
        
        %% Security Measures
        subgraph "üõ°Ô∏è Security Measures"
            MEMORY_SAFETY[Memory Safety<br/>Automatic zeroization]
            TIMING_PROTECTION[Timing Attack Protection<br/>Constant-time operations]
            KEY_PROTECTION[Key Protection<br/>Secure storage & handling]
            TLS_CONFIG[TLS Configuration<br/>Strong cipher suites]
            RATE_LIMITING[Rate Limiting<br/>DOS protection]
        end
        
        %% Monitoring & Observability
        subgraph "üìä Monitoring & Observability"
            HEALTH_CHECKS[Health Checks<br/>System status monitoring]
            METRICS_COLLECTION[Metrics Collection<br/>Performance tracking]
            DISTRIBUTED_TRACING[Distributed Tracing<br/>Request correlation]
            LOG_AGGREGATION[Log Aggregation<br/>Centralized logging]
            ALERTING[Alerting<br/>Incident response]
        end
        
        %% Recovery & Resilience
        subgraph "üîÑ Recovery & Resilience"
            RETRY_LOGIC[Retry Logic<br/>Exponential backoff]
            CIRCUIT_BREAKER[Circuit Breaker<br/>Failure isolation]
            GRACEFUL_DEGRADATION[Graceful Degradation<br/>Partial functionality]
            BACKUP_RECOVERY[Backup & Recovery<br/>Data persistence]
            DISASTER_RECOVERY[Disaster Recovery<br/>System restoration]
        end
        
        %% Flow connections
        HTTP_ERRORS --> ERROR_CLASSIFIER
        CRYPTO_ERRORS --> ERROR_CLASSIFIER
        REGISTRY_ERRORS --> ERROR_CLASSIFIER
        CONFIG_ERRORS --> ERROR_CLASSIFIER
        VALIDATION_ERRORS --> ERROR_CLASSIFIER
        
        ERROR_CLASSIFIER --> ERROR_ENRICHER
        ERROR_ENRICHER --> ERROR_CONVERTER
        ERROR_CONVERTER --> ERROR_LOGGER
        ERROR_LOGGER --> ERROR_METRICS
        
        ERROR_METRICS --> HEALTH_CHECKS
        ERROR_METRICS --> METRICS_COLLECTION
        ERROR_METRICS --> ALERTING
        
        MEMORY_SAFETY --> KEY_PROTECTION
        TIMING_PROTECTION --> KEY_PROTECTION
        KEY_PROTECTION --> TLS_CONFIG
        TLS_CONFIG --> RATE_LIMITING
        
        HEALTH_CHECKS --> RETRY_LOGIC
        METRICS_COLLECTION --> CIRCUIT_BREAKER
        DISTRIBUTED_TRACING --> GRACEFUL_DEGRADATION
        LOG_AGGREGATION --> BACKUP_RECOVERY
        ALERTING --> DISASTER_RECOVERY
        
        %% Styling
        classDef errorSource fill:#ffcdd2,stroke:#d32f2f,stroke-width:2px
        classDef errorProcess fill:#fff3e0,stroke:#f57c00,stroke-width:2px
        classDef security fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
        classDef monitoring fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
        classDef resilience fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
        
        class HTTP_ERRORS,CRYPTO_ERRORS,REGISTRY_ERRORS,CONFIG_ERRORS,VALIDATION_ERRORS errorSource
        class ERROR_CLASSIFIER,ERROR_ENRICHER,ERROR_CONVERTER,ERROR_LOGGER,ERROR_METRICS errorProcess
        class MEMORY_SAFETY,TIMING_PROTECTION,KEY_PROTECTION,TLS_CONFIG,RATE_LIMITING security
        class HEALTH_CHECKS,METRICS_COLLECTION,DISTRIBUTED_TRACING,LOG_AGGREGATION,ALERTING monitoring
        class RETRY_LOGIC,CIRCUIT_BREAKER,GRACEFUL_DEGRADATION,BACKUP_RECOVERY,DISASTER_RECOVERY resilience
    end

---

%% ============================================================================
%% 6. Deployment and Infrastructure Architecture
%% ============================================================================

graph TB
    subgraph "Deployment & Infrastructure Architecture"
        direction TB
        
        %% Container Layer
        subgraph "üê≥ Container Layer"
            DOCKER_IMAGE[Docker Image<br/>Multi-stage build]
            BASE_IMAGE[Base Image<br/>Distroless/Alpine]
            HEALTH_PROBE[Health Probes<br/>Liveness/Readiness]
        end
        
        %% Orchestration Layer
        subgraph "‚ò∏Ô∏è Orchestration Layer (Kubernetes)"
            DEPLOYMENT[Deployment<br/>Rolling updates]
            SERVICE[Service<br/>Load balancing]
            INGRESS[Ingress<br/>TLS termination]
            CONFIG_MAP[ConfigMap<br/>Configuration]
            SECRET[Secret<br/>Key storage]
            HPA[HPA<br/>Auto-scaling]
        end
        
        %% Infrastructure Layer
        subgraph "üèóÔ∏è Infrastructure Layer"
            LOAD_BALANCER[Load Balancer<br/>High availability]
            CERT_MANAGER[Cert Manager<br/>SSL automation]
            DNS_RESOLVER[DNS<br/>Service discovery]
            STORAGE_CLASS[Storage Class<br/>Persistent volumes]
        end
        
        %% Monitoring Stack
        subgraph "üìä Monitoring Stack"
            PROMETHEUS[Prometheus<br/>Metrics collection]
            GRAFANA[Grafana<br/>Visualization]
            JAEGER[Jaeger<br/>Distributed tracing]
            LOKI[Loki<br/>Log aggregation]
            ALERT_MGR[AlertManager<br/>Incident management]
        end
        
        %% External Services
        subgraph "üåê External Services"
            ONDC_STAGING[ONDC Staging<br/>staging.registry.ondc.org]
            ONDC_PREPROD[ONDC Pre-Prod<br/>preprod.registry.ondc.org]
            ONDC_PROD[ONDC Production<br/>prod.registry.ondc.org]
            DNS_PROVIDER_EXT[DNS Provider<br/>Domain management]
            SSL_PROVIDER_EXT[SSL Provider<br/>Certificate authority]
        end
        
        %% Connections
        DOCKER_IMAGE --> DEPLOYMENT
        BASE_IMAGE --> DOCKER_IMAGE
        HEALTH_PROBE --> DOCKER_IMAGE
        
        DEPLOYMENT --> SERVICE
        SERVICE --> INGRESS
        CONFIG_MAP --> DEPLOYMENT
        SECRET --> DEPLOYMENT
        HPA --> DEPLOYMENT
        
        INGRESS --> LOAD_BALANCER
        INGRESS --> CERT_MANAGER
        SERVICE --> DNS_RESOLVER
        SECRET --> STORAGE_CLASS
        
        DEPLOYMENT --> PROMETHEUS
        PROMETHEUS --> GRAFANA
        DEPLOYMENT --> JAEGER
        DEPLOYMENT --> LOKI
        PROMETHEUS --> ALERT_MGR
        
        LOAD_BALANCER --> ONDC_STAGING
        LOAD_BALANCER --> ONDC_PREPROD
        LOAD_BALANCER --> ONDC_PROD
        CERT_MANAGER --> SSL_PROVIDER_EXT
        DNS_RESOLVER --> DNS_PROVIDER_EXT
        
        %% Styling
        classDef containerLayer fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
        classDef orchestrationLayer fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
        classDef infrastructureLayer fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
        classDef monitoringLayer fill:#fce4ec,stroke:#c2185b,stroke-width:2px
        classDef externalLayer fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
        
        class DOCKER_IMAGE,BASE_IMAGE,HEALTH_PROBE containerLayer
        class DEPLOYMENT,SERVICE,INGRESS,CONFIG_MAP,SECRET,HPA orchestrationLayer
        class LOAD_BALANCER,CERT_MANAGER,DNS_RESOLVER,STORAGE_CLASS infrastructureLayer
        class PROMETHEUS,GRAFANA,JAEGER,LOKI,ALERT_MGR monitoringLayer
        class ONDC_STAGING,ONDC_PREPROD,ONDC_PROD,DNS_PROVIDER_EXT,SSL_PROVIDER_EXT externalLayer
    end